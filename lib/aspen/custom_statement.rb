require 'dry/types'

module Aspen
  class CustomStatement < AbstractStatement

    include Dry::Monads[:maybe]

    attr_reader :nodes, :type

    def type
      :custom
    end

    # @todo The signature of the custom statement should be the
    #   Cypher template for that statement.
    def signature
      "custom"
    end

    # @param nodes [Array<Aspen::Node>] a list of nodes
    # @param cypher [String] the Cypher generated by the template
    #   by the compiler
    # @todo The inclusion of the Cypher parameter *suggests* that
    #   there might be a better way to generate the Cypher from a
    #   custom statement. Not sure.
    def initialize(nodes: , cypher: )
      @nodes  = nodes
      @cypher = cypher
    end

    def to_cypher
      @cypher
    end
  end
end
